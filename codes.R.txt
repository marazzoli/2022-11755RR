#Survival analysis codes
#load required packages
library(survival)
library(ggplot2)
library(coxme)

#appropriate data files from the km files are obtained by subsetting km for each of the dedicated variable #(strain, generating C57BL6J, CD1 or Sv129Sv subsets, or discretized aggression index, generating Low, #Medium, or High subsets)

# survival by strain
fit=survfit(Surv(km$death,km$censored)~km$strain)
plot(fit, col=c("#48d1cc","#006400","#eead0e"), 
	xlab="Time (months)", ylab="Survival probability", cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.55,c("C57BL/6J", "CD1" , "Sv129Ev"), 
	col=c("#48d1cc","#006400","#eead0e"), 
	cex=1, lwd=3, title="Strain", bty="n" )
text(7, 0.1, "p<0.0001")

result.of.cox=coxph(formula = Surv(death, censored) ~ strain, data=km, method= "breslow")
summary(result.of.cox)

#survival by aggression index
fit=survfit(Surv(km$death,km$censored)~km$discret.agg.index)
plot(fit, col=c("#0072b2", "#f0e442","#d55e00"), xlab="Time (months)", ylab="Survival probability", cex.axis=1.5, cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
legend(0.25,0.7,c("Low","Medium", "High"), col=c("#0072b2", "#f0e442","#d55e00"), lwd=3, bty="n", title="Discretized\naggression index")
text(5, 0.1, "p<0.05")

result.of.cox=coxph(formula = Surv(death, censored) ~ discret.agg.index,, data=km, method= "breslow")
summary(result.of.cox)

# survival in C57BL/6J by aggression index
fit=survfit(Surv(kmC57$death,kmC57$censored)~kmC57$discret.agg.index)
plot(fit, col=c("#0072b2", "#f0e442","#d55e00"), xlab="Time (months)", ylab="Survival probability", main=”C57BL/6J”, cex.axis=1.5, cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
legend(0.25,0.7,c("Low","Medium", "High"), col=c("#0072b2", "#f0e442","#d55e00"), lwd=3, bty="n", title="Discretized\naggression index")
text(5, 0.1, "p=0.023")

# survival in CD1 by aggression index
fit=survfit(Surv(kmCD1$death,kmCD1$censored)~kmCD1$discret.agg.index)
plot(fit, col=c("#0072b2", "#f0e442","#d55e00"), xlab="Time (months)", ylab="Survival probability", main=”CD1”, cex.axis=1.5, cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
legend(0.25,0.7,c("Low","Medium", "High"), col=c("#0072b2", "#f0e442","#d55e00"), lwd=3, bty="n", title="Discretized\naggression index")
text(5, 0.1, "p=0.868")

# survival in Sv129Ev by aggression index
fit=survfit(Surv(kmSv$death,kmSv$censored)~kmSv$discret.agg.index)
plot(fit, col=c("#0072b2", "#f0e442","#d55e00"), xlab="Time (months)", ylab="Survival probability", main=”Sv129Ev”, cex.axis=1.5, cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
legend(0.25,0.7,c("Low","Medium", "High"), col=c("#0072b2", "#f0e442","#d55e00"), lwd=3, bty="n", title="Discretized\naggression index")
text(5, 0.1, "p=0.822")

# survival in Low DAI by strain
fit=survfit(Surv(kmLow$death,kmLow$censored)~kmLow$strain)
plot(fit, col=c("#48d1cc","#006400","#eead0e"), 
	xlab="Time (months)", ylab="Survival probability", main=”Low”, cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.55,c("C57BL/6J", "CD1" , "Sv129Ev"), 
	col=c("#48d1cc","#006400","#eead0e"), 
	cex=1, lwd=3, title="Strain", bty="n" )
text(7, 0.1, "p=0.287")

# survival in Medium DAI by strain
fit=survfit(Surv(kmMedium$death,kmMeidum$censored)~kmMedium$strain)
plot(fit, col=c("#48d1cc","#006400","#eead0e"), 
	xlab="Time (months)", ylab="Survival probability",main=”Medium”, cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.55,c("C57BL/6J", "CD1" , "Sv129Ev"), 
	col=c("#48d1cc","#006400","#eead0e"), 
	cex=1, lwd=3, title="Strain", bty="n" )
text(7, 0.1, "p<0.001")

# survival in High DAI by strain
fit=survfit(Surv(kmHigh$death,kmHigh$censored)~kmHigh$strain)
plot(fit, col=c("#48d1cc","#006400","#eead0e"), 
	xlab="Time (months)", ylab="Survival probability", main=”High”, cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.55,c("C57BL/6J", "CD1" , "Sv129Ev"), 
	col=c("#48d1cc","#006400","#eead0e"), 
	cex=1, lwd=3, title="Strain", bty="n" )
text(7, 0.1, "p=0.005")

# survival in C57BL/6J by lesions
fit=survfit(Surv(kmC57$death,kmlow$censored)~kmlow$lesions)
plot(fit, col=c("#77ceff","#15abff","#0098ed","#0072b2", "#004c77", "#001a29"), 
	xlab="Time (months)", ylab="Survival probability", main="Low", cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.6,c("0", "1" , "2" , "3", "4", "5+"), 
	col=c("#77ceff","#15abff","#0098ed","#0072b2", "#004c77", "#001a29"), 
	cex=1, lwd=3, title="Lesion number", bty="n" )

# survival in CD1 by lesions
fit=survfit(Surv(kmCD1$death,kmCD1$censored)~kmCD1$lesions)
plot(fit, col=c("#e5efe5","#99c199","#328332","#006400", "#004600", "#002800"), 
	xlab="Time (months)", ylab="Survival probability", main="Low", cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.6,c("0", "1" , "2" , "3", "4", "5+"), 
	col=c("#e5efe5","#99c199","#328332","#006400", "#004600", "#002800"), 
	cex=1, lwd=3, title="Lesion number", bty="n" )

# survival in Sv129Ev by lesions
fit=survfit(Surv(kmSv$death,kmSv$censored)~kmSv$lesions)
plot(fit, col=c("#fbeece "," #f6d686"," #f1bd3e "," #eead0e", " #8e6708 ", " #5f4505 "), 
xlab="Time (months)", ylab="Survival probability", main="Low", cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.6,c("0", "1" , "2" , "3", "4", "5+"), 
	col=c("#77ceff","#15abff","#0098ed","#0072b2", "#004c77", "#001a29"), 
	cex=1, lwd=3, title="Lesion number", bty="n" )

#survival by lesion in low d.a.i
fit=survfit(Surv(kmlow$death,kmlow$censored)~kmlow$lesions)
plot(fit, col=c("#77ceff","#15abff","#0098ed","#0072b2", "#004c77", "#001a29"), 
	xlab="Time (months)", ylab="Survival probability", main="Low", cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.6,c("0", "1" , "2" , "3", "4", "5+"), 
	col=c("#77ceff","#15abff","#0098ed","#0072b2", "#004c77", "#001a29"), 
	cex=1, lwd=3, title="Lesion number", bty="n" )

#survival by lesion in medium d.a.i
fit=survfit(Surv(kmmedium$death,kmmedium$censored)~kmmedium$lesions)
plot(fit, col=c("#f4ec79","#eddf1e","#f0e442","#c1b40f", "#78700a", "#413d05"), 
	xlab="Time (months)", ylab="Survival probability", main="Low", cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.6,c("0", "1" , "2" , "3", "4", "5+"), 
	col=c("#f4ec79","#eddf1e","#f0e442","#c1b40f", "#78700a", "#413d05"),
	cex=1, lwd=3, title="Lesion number", bty="n" )

#survival by lesion in high d.a.i
fit=survfit(Surv(kmhigh$death,kmhigh$censored)~kmhigh$lesions)
plot(fit, col=c("#ffa65f","#ff8524","#fc6f00","#d55e00", "#733300", "#4c2100"), 
	xlab="Time (months)", ylab="Survival probability", main="Low", cex.axis=1.5, 
	cex.lab=1.5, cex.main=2, lwd=3, xlim=c(0,40))
	legend(0.0,0.6,c("0", "1" , "2" , "3", "4", "5+"), 
	col=c("#ffa65f","#ff8524","#fc6f00","#d55e00", "#733300", "#4c2100"),
	cex=1, lwd=3, title="Lesion number", bty="n" )


# kernel density function codes
#load required packages

library(plyr)
library(ggplot2)

# files are simply the strain column and the time of death in column in days for all individuals belonging # to each DAI category, as can be obtained from the km file.
# to add median lines for each group, calculate first

medianc57 <- ddply(c57DAI, "DAI", summarize, grp.median=median(time))
mediancd1 <- ddply(cd1DAI, "DAI", summarize, grp.median=median(time))
mediansv <- ddply(svDAI, "DAI", summarize, grp.median=median(time))
medianhigh <- ddply(DAIhigh, "strain", summarize, grp.median=median(time))
medianlow <- ddply(DAIlow,"strain", summarize, grp.median=median(time)) 
medianmedium <- ddply(DAImedium,"strain", summarize, grp.median=median(time))

# incorporate to the ggplot2 script
# C57BL/6J
ggplot(c57DAI, aes(x=time, color=DAI)) +
     geom_density(size = 1.5) + theme_classic() +
     labs(x="Time (months)", y = "Kernel Density Estimation", title = "C57BL/6J") + 
     scale_color_manual(values=c("#d55e00", "#0072b2","#f0e442")) +
     theme(plot.title = element_text(size = 20),
	   axis.text.x = element_text(size = 18, colour = "black"),
           axis.text.y = element_text(size = 18, colour = "black"),	
           axis.title.x = element_text(size = 22),
           axis.title.y = element_text(size = 22),
	   legend.position="none")  +
     scale_x_continuous(limits = c(0, 40))  +
     scale_y_continuous(limits = c(0, 0.15)) +
     geom_vline(data=medianc57, aes(xintercept=grp.median, color=DAI),
                linetype="dashed", size = 0.7)
 						
# CD1
ggplot(cd1DAI, aes(x=time, color=DAI)) +
     geom_density(size = 1.5) + theme_classic() +
     labs(x="Time (months)", y = "Kernel Density Estimation", title = "CD1") + 
     scale_color_manual(values=c("#d55e00", "#0072b2","#f0e442")) +
     theme(plot.title = element_text(size = 20),
	   axis.text.x = element_text(size = 18, colour = "black"),
           axis.text.y = element_text(size = 18, colour = "black"),	
           axis.title.x = element_text(size = 22),
           axis.title.y = element_text(size = 22),
	   legend.position="none")  +
     scale_x_continuous(limits = c(0, 40))  +
     scale_y_continuous(limits = c(0, 0.15)) +
     geom_vline(data=mediancd1, aes(xintercept=grp.median, color=DAI),
                linetype="dashed", size = 0.7)

# Sv129Ev
ggplot(svDAI, aes(x=time, color=DAI)) +
     geom_density(size = 1.5) + theme_classic() +
     labs(x="Time (months)", y = "Kernel Density Estimation", title = "Sv129Ev") + 
     scale_color_manual(values=c("#d55e00", "#0072b2","#f0e442")) +
     theme(plot.title = element_text(size = 20),
	   axis.text.x = element_text(size = 18, colour = "black"),
           axis.text.y = element_text(size = 18, colour = "black"),	
           axis.title.x = element_text(size = 22),
           axis.title.y = element_text(size = 22),
	   legend.position="none")  +
     scale_x_continuous(limits = c(0, 40))  +
     scale_y_continuous(limits = c(0, 0.15)) +
     geom_vline(data=mediansv, aes(xintercept=grp.median, color=DAI),
                linetype="dashed", size = 0.7)	

# within DAI low by strain
ggplot(DAIlow, aes(x=death, color=strain)) +
    geom_density(size = 1.5) + theme_classic() +
    labs(x="Time (months)", y = "Kernel Density Estimation", title = "Low") + 
    scale_color_manual(values=c("#48d1cc", "#006400","#eead0e")) +
    theme(plot.title = element_text(size = 20),
          axis.text.x = element_text(size = 18, colour = "black"),
          axis.text.y = element_text(size = 18, colour = "black"),	
          axis.title.x = element_text(size = 22),
          axis.title.y = element_text(size = 22),
          legend.position="none")  +
    scale_x_continuous(limits = c(0, 40))  +
    scale_y_continuous(limits = c(0, 0.15)) +
    geom_vline(data=medianlow, aes(xintercept=grp.median, color=strain),
               linetype="dashed", size = 0.7)

# within DAI medium by strain
ggplot(DAImedium, aes(x=death, color=strain)) +
    geom_density(size = 1.5) + theme_classic() +
    labs(x="Time (months)", y = "Kernel Density Estimation", title = "Medium") + 
    scale_color_manual(values=c("#48d1cc", "#006400","#eead0e")) +
    theme(plot.title = element_text(size = 20),
          axis.text.x = element_text(size = 18, colour = "black"),
          axis.text.y = element_text(size = 18, colour = "black"),	
          axis.title.x = element_text(size = 22),
          axis.title.y = element_text(size = 22),
          legend.position="none")  +
    scale_x_continuous(limits = c(0, 40))  +
    scale_y_continuous(limits = c(0, 0.15)) +
    geom_vline(data=medianhigh, aes(xintercept=grp.median, color=strain),
               linetype="dashed", size = 0.7)	

#within DAI high by strain
ggplot(DAIhigh, aes(x=death, color=strain)) +
    geom_density(size = 1.5) + theme_classic() +
    labs(x="Time (months)", y = "Kernel Density Estimation", title = "High") + 
    scale_color_manual(values=c("#48d1cc", "#006400","#eead0e")) +
    theme(plot.title = element_text(size = 20),
          axis.text.x = element_text(size = 18, colour = "black"),
          axis.text.y = element_text(size = 18, colour = "black"),	
          axis.title.x = element_text(size = 22),
          axis.title.y = element_text(size = 22),
          legend.position="none")  +
    scale_x_continuous(limits = c(0, 40))  +
    scale_y_continuous(limits = c(0, 0.15)) +
    geom_vline(data=medianhigh, aes(xintercept=grp.median, color=strain),
               linetype="dashed", size = 0.7)




#Similarity among distributions

#load required package
library(overlapping)

#to estimate the similarity among distributions, the data to be compared need to be transformed to vectors: for example:
mediumc57 = c(34.27, 34.17, 33.07, 31.83, 31.8, 31.7, 31.53, 31.47, 30.83, 30.43, 30.4, 30.4, 30.37, 30.07, 29.73, 29.67, 29.17, 28.27, 27.97, 27.6, 27.53, 27.5, 27.4, 27.4, 27.13, 27.07, 26.83, 26.73, 26.17, 26.17, 25.87, 25.87, 25.43, 24.83, 24.33, 24.27, 24.23, 23.57, 23.5, 23.33, 23.2, 22.9, 22.8, 22.67, 22.37, 22.3, 22, 20.8, 20.73, 19.9, 19.53, 19.17, 19.07, 18.43, 17.53, 16.93, 12.83)

#the same needs to be done for CD1, Sv129Ev, and for Low, Medium, and High DAI subsets.

# consolidate the distributions to be compared by creating
datac57 = list (d1 = lowc57, d2 = mediumc57, d3 = highc57)
#or for the DAI file counterpart
dataLow = list (d1 = lowc57, d2 = lowCD1, d3 = lowSv)

# run the command
out = overlap ( x = datac57)
print(out$OV)

# In general, ? = 0 means that empirical distributions are completely separated; by contrast, ? = 1 
# indicates that empirical distributions are exactly the same.




# scatterplot

#load required package
library(ggplot2)

#aggression exhibited/received by strain
pa <- ggplot() + 
geom_point(data=km , aes(x=xb, y=rcvd, color=strain), size=1) + scale_color_manual(values=straincolor) +
scale_fill_manual(values=straincolor) +
labs(y = "Aggr. received (count)", x = "Aggr. exhibited (count)") +
theme_ggdist() +
theme(axis.title.x = element_text(size = 8), axis.title.y = element_text(size = 8), legend.text = element_text(size = 6))+
theme(strip.text.x = element_text("Strain"), strip.background = element_rect(colour="white", fill="white"),legend.position=c(.9,.85)) 

# aggression index by fat free mass in C57BL6J
ggplot(kmc57, aes(agg.index, Baseline_FFM_g)) + 
     geom_point(color="#48d1cc") + 
     stat_smooth(method = lm, level = 0.98) + 
     scale_y_continuous(limits=c(10,40), breaks=seq(10, 40, 5)) + 
     scale_x_continuous(limits=c(-2,2)) +
     labs(x = "Aggression index", y = "Fat free mass (g)", title = "C57BL/6J") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0, y=10, label="r=0.184, r2=0.034, p=0.016", cex=6, color='red')

# aggression index by fat mass in C57BL6J
ggplot(kmc57, aes(agg.index, Baseline_FM_g)) + 
     geom_point(color="#48d1cc") + 
     stat_smooth(method = lm, level = 0.98) + 
     scale_y_continuous(limits=c(0,12.5), breaks=seq(0, 12.5, 2.5)) + 
     scale_x_continuous(limits=c(-2,2)) +
     labs(x = "Aggression index", y = "Fat mass (g)", title = "C57BL/6J") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0, y=0, label="r=-0.138, r2=0.019, p=0.071", cex=6, color="#DD571C")

# aggression index by fat free mass in CD1
ggplot(kmcd1, aes(agg.index, Baseline_FFM_g)) + 
     geom_point(color="#006400") + 
     stat_smooth(method = lm, level = 0.98) + 
     scale_y_continuous(limits=c(10,40), breaks=seq(0, 40, 5)) + 
     scale_x_continuous(limits=c(-2,2)) + 
     labs(x = "Aggression index", y = "Fat Free mass (g)", title = "CD1") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0, y=10, label="r=0.383, r2=0.147, p<0.001", cex=6, color='red')

# aggression index by fat mass in CD1
ggplot(kmcd1, aes(agg.index, Baseline_FM_g)) + 
     geom_point(color="#006400") + 
     stat_smooth(method = lm, level = 0.98) + 
     scale_y_continuous(limits=c(0,12.5), breaks=seq(0, 12.5, 2.5)) + 
     scale_x_continuous(limits=c(-2,2)) + 
     labs(x = "Aggression index", y = "Fat mass (g)", title = "CD1") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0, y=0, label="r=-0.218, r2=0.048, p=0.043", cex=6, color='red')

# aggression index by fat free mass in Sv129Ev
ggplot(PCAsv, aes(agg.index, Baseline_FFM_g)) + 
     geom_point(color="#EEAD0E") + 
     stat_smooth(method = lm, level = 0.98) + 
     scale_y_continuous(limits=c(10,40), breaks=seq(0, 40, 5)) + 
     scale_x_continuous(limits=c(-2,2)) +
     labs(x = "Aggression index", y = "Fat free mass (g)", title = "Sv129Ev") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0, y=10, label="r=0.272, r2=0.074, p=0.011", cex=6, color='red')

# aggression index by fat mass in Sv129Ev
ggplot(kmsv, aes(agg.index, Baseline_FM_g)) + 
     geom_point(color="#EEAD0E") + 
     stat_smooth(method = lm, level = 0.98) + 
     scale_y_continuous(limits=c(0,12.5), breaks=seq(0, 12.5, 2.5)) + 
     scale_x_continuous(limits=c(-2,2)) +
     labs(x = "Aggression index", y = "Fat mass (g)", title = "Sv129Ev") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0, y=0, label="r=-0.129, r2=0.017, p=0.233", cex=6)

# aggression index by lesion
ggplot(km, aes(lesions, agg.index)) + 
geom_point() + 
stat_smooth(method = lm, level = 0.98) + 
    labs(x = "Lesion at necropsy (count)", y = "Aggression index") +
    theme_classic() +
    theme(axis.text.x = element_text(size = 16),
	  axis.text.y = element_text(size = 16),	
 	  axis.title.x = element_text(size = 20),
	  axis.title.y = element_text(size = 20)) +
    annotate("text", x=2.5, y=2.2, label="r=0.1576, p=0.0037, r2=0.0248", cex=4, color='red')

# aggression index by lesion C57BL/6J
ggplot(kmC57, aes(lesions, agg.index)) + 
geom_point() + 
stat_smooth(method = lm, level = 0.98) + 
    labs(x = "Lesion at necropsy (count)", y = "Aggression index") +
    theme_classic() +
    theme(axis.text.x = element_text(size = 16),
	  axis.text.y = element_text(size = 16),	
 	  axis.title.x = element_text(size = 20),
	  axis.title.y = element_text(size = 20)) +
    annotate("text", x=2.5, y=2.2, label="r=0.110, r2=0.012, p=0.155, ", cex=4)

# aggression index by lesion CD1
ggplot(kmCD1, aes(lesions, agg.index)) + 
geom_point() + 
stat_smooth(method = lm, level = 0.98) + 
    labs(x = "Lesion at necropsy (count)", y = "Aggression index") +
    theme_classic() +
    theme(axis.text.x = element_text(size = 16),
	  axis.text.y = element_text(size = 16),	
 	  axis.title.x = element_text(size = 20),
	  axis.title.y = element_text(size = 20)) +
    annotate("text", x=2.5, y=2.2, label="r=0.017, r2=0.0003, p=0.880, ", cex=4)

# aggression index by lesion Sv129Ev
ggplot(kmSv, aes(lesions, agg.index)) + 
geom_point() + 
stat_smooth(method = lm, level = 0.98) + 
    labs(x = "Lesion at necropsy (count)", y = "Aggression index") +
    theme_classic() +
    theme(axis.text.x = element_text(size = 16),
	  axis.text.y = element_text(size = 16),	
 	  axis.title.x = element_text(size = 20),
	  axis.title.y = element_text(size = 20)) +
    annotate("text", x=2.5, y=2.2, label="r=0.032, r2=0.001, p=0.772, ", cex=4)

#aggression by methylation
ggplot(aggrindex_DNAm_correlation_all, aes(avg_beta, aggression_index, color = strain)) + 
     geom_point(size=4) +  
     scale_color_manual(labels = c("C57BL/6J", "CD1", "Sv129Ev"), values=c("#48d1cc", "#006400","#eead0e")) +
     scale_y_continuous(limits=c(-2,2)) +
     scale_x_continuous(limits=c(0.46,0.54)) +
     stat_smooth(formula=y~x, method = lm, level = 0.98, na.rm = TRUE, fullrange= TRUE,
                 aes(group=1), colour="black") + 
     labs(x = "CpG methylation ("*beta~")", y = "Aggression index") + 
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22), legend.text=element_text(size=16), 
	   legend.position = c(0.2,0.2), plot.margin = margin(1,1,0.5,0.5, "cm"), legend.background=element_rect(fill = alpha("white", 0.1))) +
     annotate("text", x=0.5, y=2, label="r=-0.2708, r2=0.0734, p=0.0656", cex=6, color="#DD571C")

# aggression index by methylation in C57BL6J
ggplot(aggrindex_DNAm_correlation_C57, aes(avg_beta, aggression_index)) + 
     geom_point(color="#48d1cc", size = 4) + 
     stat_smooth(formula=y~x, method = lm, level = 0.98, fullrange = T) + 
     scale_y_continuous(limits=c(-2,2)) +
     scale_x_continuous(limits=c(0.46,0.54)) +
     labs(x = "CpG methylation ("*beta~")", y = "Aggression index", title = "C57BL/6J") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0.50, y=-2, label="r=-0.4004, r2=0.1602, p=0.0896", cex=6, color="#DD571C")

# aggression index by DNA methylation in CD1
ggplot(aggrindex_DNAm_correlation_CD1, aes(avg_beta, aggression_index)) + 
     geom_point(color="#006400", size = 4) + 
     stat_smooth(formula=y~x, method = lm, level = 0.98, fullrange = T) + 
     scale_y_continuous(limits=c(-2,2)) +
     scale_x_continuous(limits=c(0.46,0.54)) +
     labs(x = "CpG methylation ("*beta~")", y = "Aggression index", title = "CD1") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0.5, y=-2, label="r=-0.2725, r2=0.0743, p=0.3915", cex=6, color="black")

# aggression index by DNA methylation in Sv129Ev
ggplot(aggrindex_DNAm_correlation_Sv, aes(avg_beta, aggression_index)) + 
     geom_point(color="#EEAD0E", size = 4) + 
     stat_smooth(formula=y~x, method = lm, level = 0.98, fullrange = T) + 
     scale_y_continuous(limits=c(-2,2)) +
     scale_x_continuous(limits=c(0.46,0.54)) +
     labs(x = "CpG methylation ("*beta~")", y = "Aggression index", title = "Sv129Ev") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           title = element_text(size = 22)) +
     annotate("text", x=0.50, y=-2, label="r=-0.5134, r2=0.2636, p=0.0419", cex=6, color="red")



# violin plot features for strain

#load required package
library(ggplot2)

#aggression index by strain 
ggplot() + 
 geom_violin(data=km, aes(x=strain, y=xb, fill=strain, color=strain), trim = FALSE, color = NA) +
 geom_point( data=km, aes(x=strain, y=xb), stat="summary", fun=mean, fun.args = list(mult=1), size=3) +
 geom_errorbar(data=errbar_lims2, aes(x=strain, ymax=upper, ymin=lower), stat='identity', width=.25) + 
 scale_fill_manual(values=straincolor) +
 labs(x = element_blank(), y = "Aggr. exhibited (count)") +
 theme_ggdist() +
 theme(legend.position = "none") +
 theme(axis.title.x = element_text(size = 8), axis.title.y = element_text(size = 8))+
 scale_x_discrete(labels= mylabs) + 
  geom_segment(aes(x = 1, y = 310, xend = 1.9, yend = 310)) + 
  geom_segment(aes(x = 2.1, y = 310, xend = 3, yend = 310))  + 
  geom_segment(aes(x = 1, y = 340, xend = 3, yend = 340)) + 
  annotate(geom="text", x=1.5, y=280, label="p<0.001", size = 2) + 
  annotate(geom="text", x=2.5, y=280, label="p<0.001", size = 2) + 
  annotate(geom="text", x=2,   y=380, label="p=0.004", size = 2)

#to calculate the limits based on the standard error formula which is not automatically provided in dplyr/ggplot2
errbar_lims = group_by(km, strain) %>%
dplyr::summarize(mean=mean(rcvd), se=sd(rcvd)/(sqrt(n())),
upper=mean+se, lower=mean-se)

#aggression by status 
ggplot() + 
 geom_violin(data=km, aes(x=status, y=xb, fill=status, color=status), trim = FALSE, color = NA) +
 geom_point( data=km, aes(x=status, y=xb), stat="summary", fun=mean, fun.args = list(mult=1), size=3) +
 geom_errorbar(data=errbar_lims2, aes(x=status, ymax=upper, ymin=lower), stat='identity', width=.25) + 
 scale_fill_manual(values=statuscolor) +
 labs(x = element_blank(), y = "Aggr. exhibited (count)") +
 theme_ggdist() +
 theme(legend.position = "none") +
 theme(axis.title.x = element_text(size = 8), axis.title.y = element_text(size = 8))+
 scale_x_discrete(labels= mylabs) + 
  geom_segment(aes(x = 1, y = 310, xend = 1.9, yend = 310)) + 
  geom_segment(aes(x = 2.1, y = 310, xend = 3, yend = 310))  + 
  geom_segment(aes(x = 1, y = 340, xend = 3, yend = 340)) + 
  annotate(geom="text", x=1.5, y=280, label="p<0.001", size = 2) + 
  annotate(geom="text", x=2.5, y=280, label="p<0.001", size = 2) + 
  annotate(geom="text", x=2,   y=380, label="p=0.004", size = 2)

#to calculate the limits based on the standard error formula which is not automatically provided in dplyr/ggplot2
errbar_lims = group_by(km, status) %>%
dplyr::summarize(mean=mean(rcvd), se=sd(rcvd)/(sqrt(n())),
upper=mean+se, lower=mean-se)

#aggression exhibited by strain
ggplot() + 
     geom_violin(data=PCA, aes(x=strain, y=xb, fill=strain, color=strain), trim = FALSE, color = NA) +
     geom_point(data=PCA, aes(x=strain, y=xb), stat="summary", fun=mean, fun.max=mean,
                fun.min=mean, fun.args = list(mult=1), size=3) + 
     geom_errorbar(aes(x=errbar_lims$strain, ymax=errbar_lims$upper,
                       ymin=errbar_lims$lower), stat='identity', width=.25) + 
     scale_fill_manual(values=c("#48D1CC", "#006400", "#EEAD0E")) +
     labs(x = "Strain", y = "Aggr. exhibited (count)") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16, colour = "black"),
           axis.text.y = element_text(size = 16, colour = "black"),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           legend.position = "none") + 
scale_x_discrete(labels= mylabs) +
	geom_segment(aes(x = 1, y = 310, xend = 1.9, yend = 310)) + 
	geom_segment(aes(x = 2.1, y = 310, xend = 3, yend = 310))  + 
	geom_segment(aes(x = 1, y = 340, xend = 3, yend = 340)) + 
	annotate(geom="text", x=1.5, y=320, label="***", size = 8) + 
	annotate(geom="text", x=2.5, y=320, label="***", size = 8) + 
	annotate(geom="text", x=2, y=350, label="**", size = 8)

#aggresssion received by strain
ggplot() + 
     geom_violin(data=PCA, aes(x=strain, y=rcvd, fill=strain, color=strain), trim = FALSE, color = NA) +
     geom_point(data=PCA, aes(x=strain, y=rcvd), stat="summary", fun=mean, fun.max=mean,
                fun.min=mean, fun.args = list(mult=1), size=3) + 
     geom_errorbar(aes(x=errbar_lims$strain, ymax=errbar_lims$upper,
                       ymin=errbar_lims$lower), stat='identity', width=.25) + 
     scale_fill_manual(values=c("#48D1CC", "#006400", "#EEAD0E")) +
     labs(x = "Strain", y = "Aggr. received (count)") +
     theme_classic() +
     theme(axis.text.x = element_text(size = 16, colour = "black"),
           axis.text.y = element_text(size = 16, colour = "black"),	
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20),
           legend.position = "none") + 
scale_x_discrete(labels= mylabs) +
	geom_segment(aes(x = 1, y = 310, xend = 1.9, yend = 310)) + 
	geom_segment(aes(x = 2.1, y = 310, xend = 3, yend = 310))  + 
	geom_segment(aes(x = 1, y = 340, xend = 3, yend = 340)) + 
	annotate(geom="text", x=1.5, y=320, label="**", size = 8) + 
	annotate(geom="text", x=2.5, y=320, label="***", size = 8) + 
	annotate(geom="text", x=2, y=350, label="*", size = 8)



# healthspan trajectory with loess curves

#load required package
library(ggplot2)

straincolor = c("#48d1cc","#006400","#eead0e")

food intake by strain
ggplot(healthspan, aes(x=weeks1, y=FI, colour=strain)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), size=0.5) + scale_color_manual(values=straincolor) +
    geom_smooth(method = "loess") + 
   theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme_ggdist() +
     labs(x = "Time (weeks)", y = "Food intake (kcal)") +
    theme(axis.title.x = element_text(size = 8),axis.title.y = element_text(size = 8))+
     theme(legend.position = 'none') +
     scale_y_continuous(limits = c(0, 30))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# body weight by strain
pe <- ggplot(healthspan, aes(x=weeks1, y=BW, colour=strain)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), size=0.5) + scale_color_manual(values=straincolor) +
    geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme_ggdist() +
     labs(x = "Time (weeks)", y = "Body weight (g)") +
    theme(axis.title.x = element_text(size = 8),axis.title.y = element_text(size = 8))+
     theme(legend.position = 'none') +
     scale_y_continuous(limits = c(20, 80))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# fat mass by strain
pf <- ggplot(healthspan, aes(x=weeks1, y=FM, colour=strain)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), size=0.5) + scale_color_manual(values=straincolor) +
    geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme_ggdist() +
     labs(x = "Time (weeks)", y = "Fat mass (g)") +
    theme(axis.title.x = element_text(size = 8),axis.title.y = element_text(size = 8))+
     theme(legend.position = 'none') +
     scale_y_continuous(limits = c(0, 30))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

#fat free mass by strain
pg <- ggplot(healthspan, aes(x=weeks1, y=FFM, colour=strain)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), size=0.5) + scale_color_manual(values=straincolor) +
    geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme_ggdist() +
     labs(x = "Time (weeks)", y = "Fat free mass (g)") +
    theme(axis.title.x = element_text(size = 8),axis.title.y = element_text(size = 8))+
     theme(legend.position = 'none') +
     scale_y_continuous(limits = c(20, 60))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# plasma glucose by strain
ph <- ggplot(healthspan, aes(x=weeks1, y=GLU, colour=strain)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), size=0.5) + scale_color_manual(values=straincolor) +
    geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme_ggdist() + 
     labs(x = "Time (weeks)", y = "Plasma glucose (mg/dL)") +
    theme(axis.title.x = element_text(size = 8),axis.title.y = element_text(size = 8))+
     theme(legend.position = 'none') +
     scale_y_continuous(limits = c(0, 350))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

d.a.i.color = c( "#0072b2", "#f0e442", "#d55e00")

# food intake in C57BL6J by discretized aggression index
healthspan %>% filter(strain=="C57BL6") %>% 
ggplot(., aes(x=weeks1, y=FI, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Food intake (kcal)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 30))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# food intake in CD1 by discretized aggression index
ggplot(healthspan %>% filter(strain=="CD1"), aes(x=weeks1, y=FI, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Food intake (kcal)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 30))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# food intake in Sv129Ev by discretized aggression index
ggplot(healthspan %>% filter(strain=="Sv129"), aes(x=weeks1, y=FI, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Food intake (kcal)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 30))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# body weight in C57BL6J by discretized aggression index
ggplot(healthspan %>% filter(strain=="C57BL6"), aes(x=weeks1, y=BW, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Body weight (g)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(20, 80))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# body weight in CD1 by discretized aggression index
ggplot(healthspan %>% filter(strain=="CD1"), aes(x=weeks1, y=BW, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = " Body weight (g)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(20, 80))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# body weight in Sv129Ev by discretized aggression index
ggplot(healthspan %>% filter(strain=="Sv129"), aes(x=weeks1, y=BW, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = " Body weight (g)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(20, 80))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# fat mass in C57BL6J by discretized aggression index
ggplot(healthspan %>% filter(strain=="C57BL6"), aes(x=weeks1, y=FM, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Fat mass (g)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 30))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# fat mass in CD1 by discretized aggression index
ggplot(healthspan %>% filter(strain=="CD1"), aes(x=weeks1, y=FM, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Fat mass (g)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 30))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# fat mass in Sv129Ev by discretized aggression index
ggplot(healthspan %>% filter(strain=="Sv129"), aes(x=weeks1, y=FM, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Fat mass (g)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 30))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# fat free mass in C57BL6J by discretized aggression index
ggplot(healthspan %>% filter(strain=="C57BL6"), aes(x=weeks1, y=FFM, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = " Fat free mass (g)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(10, 50))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# fat free mass in CD1 by discretized aggression index
ggplot(healthspan %>% filter(strain=="CD1"), aes(x=weeks1, y=FFM, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = " Fat free mass (g)")  +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(10, 50))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# fat free mass in Sv129Ev  by discretized aggression index
ggplot(healthspan %>% filter(strain=="Sv129"), aes(x=weeks1, y=FFM, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = " Fat free mass (g)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(10, 50))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# glucose in C57BL6J by discretized aggression index
ggplot(healthspan %>% filter(strain=="C57BL6"), aes(x=weeks1, y=GLU, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Plasma glucose (mg/dL)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 350))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# glucose in CD1 by discretized aggression index
ggplot(healthspan %>% filter(strain=="CD1"), aes(x=weeks1, y=GLU, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Plasma glucose (mg/dL)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 350))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))

# glucose in SV129Ev by discretized aggression index
ggplot(healthspan %>% filter(strain=="Sv129"), aes(x=weeks1, y=GLU, colour=d.a.i.)) +  
    geom_point(alpha=0.5, position=position_jitterdodge(0.5), show.legend = TRUE) +
    theme_classic() + geom_smooth(method = "loess") + 
    theme(legend.position = "right", panel.spacing = unit(2,"lines")) +
    theme(axis.text.x = element_text(size = 16),
           axis.text.y = element_text(size = 16),   
           axis.title.x = element_text(size = 20),
           axis.title.y = element_text(size = 20)) +
     labs(x = "Time (weeks)", y = "Plasma glucose (mg/dL)") +
     theme(legend.position = 'bottom') + scale_color_manual(values=d.a.i.color) +
     scale_y_continuous(limits = c(0, 350))+
     scale_x_continuous(limits = c(0, 125), breaks=c(0,30, 60, 90, 120))



#linear mixed models
#load required package
library(nlme)

# Merging baseline and longitudinal data sets by animal identification variable "ID".
# Creating the pair ID variable "pair".
# Merging new pair ID variable information into baseline data sets.
pair %<>% mutate(ID=SubjectID) %>% group_by(pair =  paste(pmin(SubjectID, PartnerID), "+", pmax(SubjectID, PartnerID)) %>% factor()) 
healthspan %<>% left_join(., pair, by="ID", suffix=c("",".y")) %>% dplyr::select(-ends_with(".y"))
km   %<>% left_join(., healthspan %>% slice(1) %>% dplyr::select(c("ID","rank","pair")), by="ID") %>% tibble()
km   %<>% left_join(., timeSpan, by="ID", suffix=c("",".y")) %>% dplyr::select(-ends_with(".y")) %>% tibble()
km   %<>% left_join(., timeSpanMax, by="ID", suffix=c("",".y")) %>% dplyr::select(-ends_with(".y")) %>% tibble()

#food intake by strain
Food.intake.pair = lme(FI~weeks1 + strain, random=~weeks1|pair/ID, corr=corAR1(form = ~ weeks1 | pair/ID), control=lmeControl(opt='optim'), data=healthspan)

#body weight by strain
body.weight.pair = lme(BW~weeks1 + strain, random=~weeks1|pair/ID, corr=corAR1(form = ~ weeks1 | pair/ID), control=lmeControl(opt='optim'), data=healthspan, na.action = na.omit)

#fat mass by strain 
fat.mass.pair = lme(FM~weeks1 + strain, random=~weeks1|pair/ID, corr=corAR1(form = ~ weeks1 | pair/ID), control=lmeControl(opt='optim'), data=healthspan)

#fat free mass by strain
fat.free.mass.pair = lme(FFM~weeks1 + strain, random=~weeks1|pair/ID, corr=corAR1(form = ~ weeks1 | pair/ID), control=lmeControl(opt='optim'), data=healthspan, na.action = na.omit)

#glucose by strain
plasma.glucose.paired = lme(GLU~weeks1 + strain, random=~weeks1|pair/ID, corr=corAR1(form = ~ weeks1 | pair/ID), control=lmeControl(opt='optim'), data=healthspan, na.action = na.omit)

#food intake within strain by discretized aggression index
healthspan %>% group_by(strain) %>% mutate(d.a.i.=relevel(d.a.i., ref="high")) %>% 
   group_modify(.f = ~ broom::tidy(lme(FI~weeks1 + d.a.i., random=~weeks1|pair/ID, corr=corAR1(form = ~ weeks1 | pair/ID), control=lmeControl(opt='optim'),data=.), effects = c("fixed") )) %>% hux()

#body weight within strain by discretized aggression index
healthspan %>% group_by(strain) %>%
   group_modify(.f = ~ broom::tidy(lme(BW~weeks1 + d.a.i., random=~weeks1|pair/ID, corr=corAR1(form = ~ weeks1 | pair/ID), control=lmeControl(opt='optim'),data=.), effects = c("fixed") )) %>% hux()

#fat mass within strain by discretized aggression index
healthspan %>% group_by(strain) %>%
 group_modify(
  .f = ~ broom::tidy(lme(FM~weeks1 + d.a.i.,
                         random=~weeks1|pair/ID,
                         corr=corAR1(form=~weeks1 | pair/ID),
                         control=lmeControl(opt='optim'),data=.),
                     effects = c("fixed"))) %>% hux()

#fat free mass within strain by discretized aggression index
healthspan %>% group_by(strain) %>%
 group_modify(
  .f = ~ broom::tidy(lme(FFM~weeks1 + d.a.i.,
                        random=~weeks1|pair/ID,
                        corr=corAR1(form=~weeks1 | pair/ID),
                        control=lmeControl(opt='optim'),data=.),
                     effects = c("fixed"))) %>% hux()

#glucose within strain by discretized aggression index
healthspan %>% group_by(strain) %>%
   group_modify(.f = ~ broom::tidy(lme(GLU~weeks1 + d.a.i., random=~weeks1|pair/ID, corr=corAR1(form = ~ weeks1 | pair/ID), control=lmeControl(opt='optim'),data=.), effects = c("fixed"))) %>% hux()



# average and standard error plot
library(dplyr)
library(ggplot2)

#methylation and epi_clock variables obtained after processing methylation data (see below)

#methylation plot
p=ggplot(DNAmClock, aes(x=DAI, y=avg_beta, group=DAI)) +
  scale_color_manual(values=c("Low"="#0072b2", "Medium"="#f0e442", "High"="#d55e00")) + 
  scale_fill_manual(values=c("#0072b2", "#f0e442","#d55e00")) + 
  geom_boxplot(aes(fill=DAI), outlier.shape = NA) + facet_wrap( ~ strain) +
  labs(y=("CpG methylation (" *beta~ ")")) +
  theme(axis.text.x = element_text(size = 16, colour = "black", angle = 45, vjust = 1, hjust=1),
        axis.text.y = element_text(size = 16, colour = "black"),	
        axis.title.x = element_text(size = 20),
        axis.title.y = element_text(size = 20),
        legend.position = "none",
        strip.text.x = element_text(size=16, color="black", face="bold"),
        strip.text.y = element_text(size=16, color="black", face="bold"))

ann_text1 <- data.frame(DAI = "Medium",avg_beta = 0.495,lab = "Strain Effect:",
                      strain = factor("CD1",levels = c("C57BL/6J","CD1","Sv129Ev")))
ann_text2 <- data.frame(DAI = "Medium",avg_beta = 0.495,lab = "Strain Effect:",
                      strain = factor("Sv129Ev",levels = c("C57BL/6J","CD1","Sv129Ev")))
ann_text3 <- data.frame(DAI = "Medium",avg_beta = 0.49,lab = "DAI Effect:",
                      strain = factor("CD1",levels = c("C57BL/6J","CD1","Sv129Ev")))
ann_text4 <- data.frame(DAI = "Medium",avg_beta = 0.49,lab = "DAI Effect:",
                      strain = factor("Sv129Ev",levels = c("C57BL/6J","CD1","Sv129Ev")))


p +  geom_text(data = ann_text1,label = "Strain effect", cex = 6) +
     geom_text(data = ann_text2,label = "p<0.0001", cex = 6) +
     geom_text(data = ann_text3,label = "DAI effect", cex = 6) +
     geom_text(data = ann_text4,label = "p=0.01297", cex = 6)

#DNAm age  by DAI and strain box plot
p=ggplot(DNAmClock, aes(x=DAI, y=epi_clock_Sesame, group=DAI)) +
  scale_color_manual(values=c("Low"="#0072b2", "Medium"="#f0e442", "High"="#d55e00")) + 
  scale_fill_manual(values=c("#0072b2", "#f0e442","#d55e00")) + 
  geom_boxplot(aes(fill=DAI), outlier.shape = NA) + facet_wrap( ~ strain) +
  labs(y=("DNA age (mo)")) +
  theme(axis.text.x = element_text(size = 16, colour = "black", angle = 45, vjust = 1, hjust=1),
        axis.text.y = element_text(size = 16, colour = "black"),	
        axis.title.x = element_text(size = 20),
        axis.title.y = element_text(size = 20),
        legend.position = "none",
        strip.text.x = element_text(size=16, color="black", face="bold"),
        strip.text.y = element_text(size=16, color="black", face="bold"))

ann_text1 <- data.frame(DAI = "Medium",avg_beta = 0.495,lab = "Strain Effect:",
                      strain = factor("CD1",levels = c("C57BL/6J","CD1","Sv129Ev")))
ann_text2 <- data.frame(DAI = "Medium",avg_beta = 0.495,lab = "Strain Effect:",
                      strain = factor("Sv129Ev",levels = c("C57BL/6J","CD1","Sv129Ev")))
ann_text3 <- data.frame(DAI = "Medium",avg_beta = 0.49,lab = "DAI Effect:",
                      strain = factor("CD1",levels = c("C57BL/6J","CD1","Sv129Ev")))
ann_text4 <- data.frame(DAI = "Medium",avg_beta = 0.49,lab = "DAI Effect:",
                      strain = factor("Sv129Ev",levels = c("C57BL/6J","CD1","Sv129Ev")))


p +  geom_text(data = ann_text1,label = "Strain effect", cex = 6) +
     geom_text(data = ann_text2,label = "p=0.022", cex = 6) +
     geom_text(data = ann_text3,label = "DAI effect", cex = 6) +
     geom_text(data = ann_text4,label = "p=0.659", cex = 6)

#lesion by strain
lesions.summary <- km %>% # the names of the new data frame and the data frame to be summarized
     group_by(strain) %>%   # the grouping variable
     dplyr::summarize(mean_lesions = mean(lesions,na.rm=TRUE),  # calculates the mean of each group
               sd_lesions = sd(lesions,na.rm=TRUE), # calculates the standard deviation of each group
               n_lesions = n(),  # calculates the sample size per group
               SE_lesions = sd(lesions,na.rm=TRUE)/sqrt(n()))

ggplot(lesions.summary, aes(strain, mean_lesions, color=strain, fill=strain)) + 
  geom_bar(stat="identity") + 
  geom_errorbar(aes(ymin=mean_lesions-SE_lesions, ymax=mean_lesions+SE_lesions), width=0.2, color="black") + 
  scale_color_manual(values=c("C57BL6"="#48D1CC", "CD1"="#006400", "Sv129"="#eead0e")) + 
  scale_fill_manual(values=straincolor) +
  scale_x_discrete(labels=c("C57BL6" = "C57BL/6J", "CD1" = "CD1", "Sv129"="Sv129Ev")) +
  labs(y="Lesions (count)") + 
  theme(panel.background = element_rect(fill = "NA", colour = "NA", size = 0.5, linetype = "solid"),
        panel.border = element_blank(), 
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        axis.line.x = element_line(size = 1, linetype = "solid", color = "black"),
        axis.line.y = element_line(size = 1, linetype = "solid", color = "black"),
        axis.text.x=element_text(colour="black", size = 20),
        axis.text.y=element_text(colour="black", size = 20), 
        axis.title.x=element_blank(),
        axis.title = element_text(size=22), legend.text=element_text(size=16),
        legend.position="none") + 
  annotate("text", x=3, y=3.5, label="p<0.001", cex=6)



#floating bar graphs
#for the graphs of the 3 strains population, due to the large sample size and to facilitate comparisons 
#across groups that had different sample sizes, the width was adjusted to the mouse percentage divided by 50

#load required packages
library(ggplot2)

## C57BL/6J
ggplot(aes(y=months, x=tissue, fill=cspan, width=perc.mice/50), data=mosaic57) + 
geom_bar(stat ='identity') + coord_flip(ylim=c(0,40), xlim=c(0,18)) + 
scale_fill_manual("span", values=c('#48d1cc', "white")) +
theme (panel.background = element_rect(fill = "white",
        colour = "white",
        size = 0.5, linetype = "solid"),
	panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_line(size=0.5, color="gray80", linetype="dashed"),
        axis.line.x = element_line(size = 0.5, linetype = "solid", color = "black"),
	axis.line.y = element_line(size = 0.5, linetype = "solid", color = "black"),
        axis.text.x=element_text(colour="black", size = 20),
           axis.text.y=element_text(colour="black", size = 18),
           legend.position="none",
           axis.title = element_text(size=22),
           plot.title = element_text(size = 30)) + 
	   xlab("Lesion") + 
	   ylab("Age(months)")

## CD1 
ggplot(aes(y=months, x=tissue, fill=cspan, width=perc.mice/50), data=mosaiCD1) + 
geom_bar(stat ='identity') + coord_flip(ylim=c(0,40), xlim=c(0,18)) + 
scale_fill_manual("span", values=c('#006400”, "white")) +
theme (panel.background = element_rect(fill = "white",
        colour = "white",
        size = 0.5, linetype = "solid"),
	panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_line(size=0.5, color="gray80", linetype="dashed"),
        axis.line.x = element_line(size = 0.5, linetype = "solid", color = "black"),
	axis.line.y = element_line(size = 0.5, linetype = "solid", color = "black"),
        axis.text.x=element_text(colour="black", size = 20),
           axis.text.y=element_text(colour="black", size = 18),
           legend.position="none",
           axis.title = element_text(size=22),
           plot.title = element_text(size = 30)) + 
	   xlab("Lesion") + 
	   ylab("Age(months)")

##Sv129Ev
ggplot(aes(y=months, x=tissue, fill=cspan, width=perc.mice/50), data=mosaicSv) + 
geom_bar(stat ='identity') + coord_flip(ylim=c(0,40), xlim=c(0,18)) + 
scale_fill_manual("span", values=c('#eead0e’, "white")) +
theme (panel.background = element_rect(fill = "white",
        colour = "white",
        size = 0.5, linetype = "solid"),
	panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_line(size=0.5, color="gray80", linetype="dashed"),
        axis.line.x = element_line(size = 0.5, linetype = "solid", color = "black"),
	axis.line.y = element_line(size = 0.5, linetype = "solid", color = "black"),
        axis.text.x=element_text(colour="black", size = 20),
           axis.text.y=element_text(colour="black", size = 18),
           legend.position="none",
           axis.title = element_text(size=22),
           plot.title = element_text(size = 30)) + 
	   xlab("Lesion") + 
	   ylab("Age(months)")

#Low dai
ggplot(aes(y=months, x=tissue, fill=cspan, width=perc.mice/50), data=mosaicLow) + 
geom_bar(stat ='identity') + coord_flip(ylim=c(0,40), xlim=c(0,18)) + 
scale_fill_manual("span", values=c('#0072b2, "white")) +
theme (panel.background = element_rect(fill = "white",
        colour = "white",
        size = 0.5, linetype = "solid"),
	panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_line(size=0.5, color="gray80", linetype="dashed"),
        axis.line.x = element_line(size = 0.5, linetype = "solid", color = "black"),
	axis.line.y = element_line(size = 0.5, linetype = "solid", color = "black"),
        axis.text.x=element_text(colour="black", size = 20),
           axis.text.y=element_text(colour="black", size = 18),
           legend.position="none",
           axis.title = element_text(size=22),
           plot.title = element_text(size = 30)) + 
	   xlab("Lesion") + 
	   ylab("Age(months)")

#Medium dai
ggplot(aes(y=months, x=tissue, fill=cspan, width=perc.mice/50), data=mosaicMedium) + 
geom_bar(stat ='identity') + coord_flip(ylim=c(0,40), xlim=c(0,18)) + 
scale_fill_manual("span", values=c('#f0e442”, "white")) +
theme (panel.background = element_rect(fill = "white",
        colour = "white",
        size = 0.5, linetype = "solid"),
	panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_line(size=0.5, color="gray80", linetype="dashed"),
        axis.line.x = element_line(size = 0.5, linetype = "solid", color = "black"),
	axis.line.y = element_line(size = 0.5, linetype = "solid", color = "black"),
        axis.text.x=element_text(colour="black", size = 20),
           axis.text.y=element_text(colour="black", size = 18),
           legend.position="none",
           axis.title = element_text(size=22),
           plot.title = element_text(size = 30)) + 
	   xlab("Lesion") + 
	   ylab("Age(months)")

#High dai
ggplot(aes(y=months, x=tissue, fill=cspan, width=perc.mice/50), data=mosaicHigh) + 
geom_bar(stat ='identity') + coord_flip(ylim=c(0,40), xlim=c(0,18)) + 
scale_fill_manual("span", values=c('#d55e00”, "white")) +
theme (panel.background = element_rect(fill = "white",
        colour = "white",
        size = 0.5, linetype = "solid"),
	panel.border = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_line(size=0.5, color="gray80", linetype="dashed"),
        axis.line.x = element_line(size = 0.5, linetype = "solid", color = "black"),
	axis.line.y = element_line(size = 0.5, linetype = "solid", color = "black"),
        axis.text.x=element_text(colour="black", size = 20),
           axis.text.y=element_text(colour="black", size = 18),
           legend.position="none",
           axis.title = element_text(size=22),
           plot.title = element_text(size = 30)) + 
	   xlab("Lesion") + 
	   ylab("Age(months)")




#DNA methylation analysis
#install packages
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("sesame")
BiocManager::install("minfi")

install.packages('dplyr')
install.packages('knitr')
install.packages('tidyr')
install.packages('SummarizedExperiment')
install.packages('Rcolorbrewer')

#Your data
# a file called something like Example_Data_012 that contains all the raw 
#data and a sample sheet. 
# make a file that includes the sample names from your sample sheet and the experimental 
#groups and put that in experiment folder. 
#627	CD1H
#629	CD1H
#630	CD1H
#633	CD1H
# etc....

#Change the paths to something like C:\Users\me\Downloads\...

#load libraries
library(sesame, quietly = TRUE, warn.conflicts = FALSE)
library(ggplot2, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
library(knitr, quietly = TRUE, warn.conflicts = FALSE)
library(tidyr, quietly = TRUE, warn.conflicts = FALSE)
library(SummarizedExperiment, quietly = TRUE, warn.conflicts = FALSE)
library(RColorBrewer, quietly = TRUE, warn.conflicts = FALSE)
library(minfi, quietly = TRUE, warn.conflicts = FALSE)

## read in the intensity files, the sample sheet, and a file explaining the groupings. 
# append the classes to the sample sheet and do some re-ordering (change appropriately).
idat_files <- searchIDATprefixes('C:/Users/maria/Documents/…../IDAT_files',
                                 recursive = T)

sheet <- read.metharray.sheet('C:/Users/maria/Documents/…..’, 
                              pattern = 'xxx_Project_xxx_Sample_Sheet.csv')

id.classes <- read.table('C:/Users/…../Documents/……/id_classes.txt',
                         header = F, sep = '\t',)
names(id.classes) <- c('sample', 'class', 'strain', 'dai')

sheet$class <- id.classes$class
sheet$class <- factor(sheet$class)
sheet$class <- relevel(sheet$class, 'C57L')

sheet$strain <- id.classes$strain
sheet$strain <- factor(sheet$strain)
sheet$strain <- relevel(sheet$strain, 'C57')

sheet$dai <- id.classes$dai
sheet$dai <- factor(sheet$dai)
sheet$dai <- relevel(sheet$dai, 'L')


# Pull in the raw data for sample sex inference.
sdfs = lapply(idat_files, readIDATpair)
names(sdfs) <- sheet$Sample_Name

#QC and filtering in one step
#The openSesame() function does all the pre-processing
  
betas <- openSesame(idat_files)
colnames(betas) <- sheet$Sample_Name

# Remove any probe with NAs
betas <- betas[complete.cases(betas),]

sheet <- sheet[order(sheet$Basename),]

#Differential methylation testing
# The function compares all other groups to a particular reference group. 
  
dat <- list(betas, sheet)
names(dat) <- c('betas', 'sheet')

smry <- DML(dat$betas, ~class, meta = dat$sheet, mc.cores = 1)
result <- summaryExtractTest(smry)
head(result)

smry_dai <- DML(dat$betas, ~dai, meta = dat$sheet, mc.cores = 1)
result_dai <- summaryExtractTest(smry_dai)
head(result_dai)

smry_strain <- DML(dat$betas, ~strain, meta = dat$sheet, mc.cores = 1)
result_strain <- summaryExtractTest(smry_strain)
head(result_strain)


group2_pvals <- result$Pval_classGroup2
length(group2_pvals[which(group2_pvals < 0.05)])

group2_pvals_adj <- p.adjust(group2_pvals, method = 'BH')
length(group2_pvals_adj[which(group2_pvals_adj < 0.05)])

#Differentially methylated regions
# collate that information to inform about regions of the genome that are differentially 
#methylated. For this, we just need to pick a particular contrast.

group2_segs <- DMR(betas, smry, 'classGroup2')
## Merging correlated CpGs ... Done.
## Generated 134684 segments.
## Combine p-values ... 
##  - 17076 significant segments.
##  - 460 significant segments (after BH).
## Done.
head(group2_segs)

#  visualize region to look up genes, for ex
visualizeRegion(
            'chrX',101274305,101274313, betas, 
            platform='MM285', 
            refversion = c("mm10"),
            show.probeNames = FALSE)

# visualize gene to show CpGs, for example
visualizeGene('Med12', betas, platform='MM285', 
              refversion = c("mm10"))

# To visualize genome neighborhood using probe names (probes are not well mapped)
visualizeProbes(c("cg47564226", "cg48112284"), betas,  platform='MM285', 
                refversion = c("mm10"))

#age inference of individual samples
#set the actual id to the individual folder containing the .IDAT files, of which there is one for
#each Sentrix id
#create a SigDF file for each subject calling the two corresponding .IDAT files by prefix only
#for example
sdfxxx = readIDATpair("xxxxxxxxxxx_R01C01")

#use the predictMouseAgeInMonths function while pre-processing the data, correcting for background
#and dye bias = 1
predictMouseAgeInMonth(getBetas(dyeBiasNL(noob(pOOBAH(sdfxxx)))))



#Cumulative distribution function graphs

# by strain
plot(ecdf(DNAmClock[DNAmClock$strain=="C57BL/6J",]$avg_beta),
     xlim=c(0.48,0.53), 
     xlab = "CpG methylation (" *beta~ ")",
     ylab ="Cumulative proportion", 
     main = "By strain",
     col="#48d1cc",
     cex = 1.5,
     cex.axis= 1.5,
     cex.lab = 1.5,
     cex.main = 1.5,
     lwd = 2)
lines(ecdf(DNAmClock[DNAmClock$strain=="CD1",]$avg_beta),
      col="#006400", cex = 1.5, lwd = 2)
lines(ecdf(DNAmClock[DNAmClock$strain=="Sv129Ev",]$avg_beta),
      col="#eead0e", cex = 1.5, lwd = 2)
abline(h=0.5, col="gray", lty = 2)

# enter the legend as a separate command if needed
legend("topleft", legend = c("C57BL/6J", "CD1", "Sv129Ev"), lwd=3, 
       col = c("#48d1cc", "#006400", "#eead0e"), bty="n")

#by discretized aggression index	
plot(ecdf(DNAmClock[DNAmClock$DAI=="Low",]$avg_beta),
     xlim=c(0.48,0.53), 
     xlab = "CpG methylation (" *beta~ ")",
     ylab ="Cumulative proportion", 
     main = "By DAI",
     col="#0072b2",
     cex = 1.5,
     cex.axis= 1.5,
     cex.lab = 1.5,
     cex.main = 1.5,
     lwd = 2)
lines(ecdf(DNAmClock[DNAmClock$DAI=="Medium",]$avg_beta),
      col="#f0e442", cex = 1.5, lwd = 2)
lines(ecdf(DNAmClock[DNAmClock$DAI=="High",]$avg_beta),
      col="#d55e00", cex = 1.5, lwd = 2)
abline(h=0.5, col="gray", lty = 2)

# enter the legend as a separate command if needed
legend("topleft", legend = c("Low", "Medium", "High"), lwd=3, 
       col = c("#0072b2", "#f0e442","#d55e00"), bty="n")


#heatmap of CpG islands

#load required packages
library(pheatmap)
library(dplyr)

AllAnnotations = read.csv("betas_CpGislands_annotation.csv", sep=",", row.names=1)
Annotation_file_selection <- select(Annotation_file, Group1, Group2)

# Add to a list, where names match those in factors dataframe
Annotation_file_selection$Strain <- factor(Annotation_file_selection$Strain, levels = c("C57BL/6J", "CD1", "Sv129Ev"))
StrainCol <- c("#48d1cc", "#006400", "#eead0e")
names(StrainCol) <- levels(Annotation_file_selection $Strain)

Annotation_file_selection$DAI <- factor(Annotation_file_selection$DAI, levels = c("Low", "Medium", "High"))
DAICol <- c("#0072b2", "#f0e442", "#d55e00")
names(DAICol) <- levels(Annotation_file_selection$DAI)

AnnColour <- list(
  Strain = StrainCol,
  DAI = DAICol)

AnnColour

#check that this is the result by entering AnnColour
$Sample_Strain_Group
 C57BL/6J       CD1   Sv129Ev 
"#48d1cc" "#006400" "#eead0e" 

$Sample_DAI_Group
     High       Low    Medium 
"#d55e00" "#0072b2" "#f0e442"

#make the dataframe a matrix
betas_islands = read.csv("betas_islands.csv", sep=",", row.names=1)
betas_islands = as.matrix(betas_islands)
is.matrix(betas_islands)

pheatmap(betas_islands,
          clustering_distance_cols = "euclidean", clustering_distance_rows = "euclidean",
	  clustering_method = "ward.D2",
          annotation_col = betas_annotation_selection, annotation_colors = AnnColour, 
	  show_rownames = F, show_colnames = F)



#phylogenetic tree

#load required package
library(ape)

#the file needs to be a matrix and will be clustered by rows; if individuals/groups are to be clustered, 
and they are found in columns, the matrix needs to be transposed.
all_betas_groups = read.csv("all_betas_onegroup.csv", sep=",", row.names=1)
all_betas_groups = as.matrix(all_betas_groups)
all_betas_groups = na.omit(all_betas_groups)
all_betas_groups_t = t(all_betas_groups)

# Compute distances and hierarchical clustering
dd <- dist(scale(data), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")

plot(as.phylo(hc_group), type = "unrooted", tip.color = c("#d55e00","#f0e442", "#0072b2","#f0e442","#d55e00", "#0072b2","#f0e442","#d55e00"),
             cex = 1.25, font= 2, edge.width = 2)

# Reactome pathways visualization
# load required packages
library(tidyverse)
library(ggplot2)

#create the file downloading the Analysis results from Reactome web
# the file is in the form
name	                                                                         ratio	          pValue	FDR
DEx/H-box helicases activate type I IFN and inflammatory cytokines production 	7.72E-04	0.001103571	0.073939282
Classical Kir channels								4.41E-04	0.009245236	0.20249549
Cytosolic sensors of pathogen-associated DNA 					0.003528504	0.012395085	0.20249549
SUMO is conjugated to E1 (UBA2:SAE1)						3.31E-04	0.01612545	0.20249549
............

#C57BL/6J high vs low DAI DML
ggplot(Reactome_top30_C57, aes(reorder(terms, pValue), pValue, fill = FDR)) +
     geom_col() +
     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
     coord_flip() + expand_limits(y = c(0, 0.4)) +
     labs(x="Pathway", y="p-value",
          title="C57BL/6J High vs Low DAI") + scale_fill_gradient(low="red", high="blue",limits = c(0.001, 0.55))

#CD1 high vs medium DAI DML
ggplot(Reactome_top30_CD1, aes(reorder(terms, pValue), pValue, fill = FDR)) +
     geom_col() +
     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
     coord_flip() + expand_limits(y = c(0, 0.4)) +
     labs(x="Pathway", y="p-value",
          title="CD1 High vs Medium DAI") + scale_fill_gradient(low="red", high="blue",limits = c(0.001, 0.55))

#Sv129Ev high vs medium DAI DML
ggplot(Reactome_top30_Sv, aes(reorder(terms, pValue), pValue, fill = FDR)) +
     geom_col() +
     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
     coord_flip() + expand_limits(y = c(0, 0.4)) +
     labs(x="Pathway", y="p-value",
          title="Sv129Ev High vs Medium DAI") + scale_fill_gradient(low="red", high="blue",limits = c(0.001, 0.55))



#manhattan plots
#load required package
library(qqman)

#all chromosomes need to be indicated as numbers

#differentially methylated regions
manhattan(DMR_C57H_vs_L_manhattan, chr="chr", bp="bp", snp="seg", p="pval", ylab = "-log10(p)", 
	main = "C57BL/6J High vs Low DAI DMR", ylim = c(0,20), cex = 1, cex.axis = 1.5, cex.main = 1.5, cex.lab = 1.5)

manhattan(DMR_CD1H_vs_M_manhattan, chr="chr", bp="bp", snp="seg", p="pval", ylab = "-log10(p)", 
	main = "CD1 High vs Medium DAI DMR", ylim = c(0,20), cex = 1, cex.axis = 1.5, cex.main = 1.5, cex.lab = 1.5)

manhattan(DMR_SvH_vs_M_manhattan, chr="chr", bp="bp", snp="seg", p="pval", ylab = "-log10(p)", 
	main = "Sv129Ev High vs Medium DAI DMR", ylim = c(0,20), cex = 1, cex.axis = 1.5, cex.main = 1.5, cex.lab = 1.5)

#differentially methylated loci
manhattan(DML_C57H_vs_L_manhattan, chr="chr", bp="bp", snp="seg", p="pval", ylab = "-log10(p)", 
	main = "C57BL/6J High vs Low DAI DMR", ylim = c(0,20), cex = 1, cex.axis = 1.5, cex.main = 1.5, cex.lab = 1.5)

manhattan(DML_CD1H_vs_M_manhattan, chr="chr", bp="bp", snp="seg", p="pval", ylab = "-log10(p)", 
	main = "CD1 High vs Medium DAI DMR", ylim = c(0,20), cex = 1, cex.axis = 1.5, cex.main = 1.5, cex.lab = 1.5)

manhattan(DML_SvH_vs_M_manhattan, chr="chr", bp="bp", snp="seg", p="pval", ylab = "-log10(p)", 
	main = "Sv129Ev High vs Medium DAI DMR", ylim = c(0,20), cex = 1, cex.axis = 1.5, cex.main = 1.5, cex.lab = 1.5)


#machine learning
dataset <-km

#remove all the variables of no interest before running the na.omit command
dataset = na.omit(dataset)

#load required package
library(caret)

# summarize the class distribution for species
percentage <- prop.table(table(dataset$strain)) * 100
cbind(freq=table(dataset$strain), percentage=percentage)

# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$strain, p=0.80, list=FALSE)

# select 20% of the data for validation
validation <- dataset[-validation_index,]

# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]

# Run algorithm using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"

# linear algorithm
set.seed(7)
fit.lda <- train(strain~., data=dataset, method="lda", metric=metric, trControl=control)

# summarize accuracy of model
results <- resamples(list(lda=fit.lda))
summary(results)

# summarize Model
print(fit.lda)

# estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$strain)

#variable importance per model
varImp(fit.lda)

# summarize the class distribution for discretized aggression index
percentage <- prop.table(table(dataset$discret.agg.index)) * 100
cbind(freq=table(dataset$discret.agg.index), percentage=percentage)

# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$discret.agg.index, p=0.80, list=FALSE)

# select 20% of the data for validation
validation <- dataset[-validation_index,]

# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]

# Run algorithm using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"

# linear algorithm
set.seed(7)
fit.lda <- train(discret.agg.index~., data=dataset, method="lda", metric=metric, trControl=control)

# summarize accuracy of model
results <- resamples(list(lda=fit.lda))
summary(results)

# summarize Model
print(fit.lda)

# estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$strain)

#variable importance per model
varImp(fit.lda)



# Gao-Allison method for differences at survival milestones
# load required packages 
library(dplyr)
library(kableExtra)

#DAI by strain
km.them <- km %>% group_by(discret.agg.index) %>% mutate(med.surv = median(death), ninty.surv = quantile(death, probs = .9, na.rm = TRUE))

km.them$survived.median <- ifelse(km.them$death > km.them$med.surv, "Yes", "No")
# 1 if animal survived longer than median, 0 if did not

km.them$survived.90th <- ifelse(km.them$death > km.them$ninty.surv, "Yes", "No")
# 1 if animal survived longer than 90th, 0 if not

km.them$median.days <- ifelse(km.them$death > km.them$med.surv, km.them$death, 0)
# days survived if animal survived longer than median, 0 if did not

km.them$ninty.days <- ifelse(km.them$death > km.them$ninty.surv, km.them$death, 0)
# days survived if animal survived longer than 90th, 0 if not

outall <- km.them %>%#glimpse
  group_by(discret.agg.index) %>%
  dplyr::summarize(median.tau = mean(med.surv), ninty.tau = mean(ninty.surv))

out2E <-
    km.them %>% 
  group_by(discret.agg.index, strain) %>%
  dplyr::count(survived.median) %>%
  mutate(prop = prop.table(n)*100)

km.them <-
 km %>% group_by(discret.agg.index) %>%
 mutate(
  med.surv            = median(death),
  ninty.surv          = quantile(death, probs = .9, na.rm = TRUE),
  survived.median     = ifelse(death > med.surv, "Yes", "No") %>% as_factor(),
  survived.90th       = ifelse(death > ninty.surv, "Yes", "No") %>% as_factor(),
  median.days         = ifelse(death > med.surv, death, 0),
  ninty.days          = ifelse(death > ninty.surv, death, 0) ) 

out50 <-
 km.them %>%
  group_by(discret.agg.index, strain) %>%
  dplyr::count(survived.median) %>%
  mutate(prop = prop.table(n)*100 %>% signif(2)) %>%
  filter(survived.median=="Yes") %>% 
  dplyr::select(c(discret.agg.index, strain, prop)) %>%
  pivot_wider(names_from = strain, values_from = prop) 

out90 <-
km.them %>% 
  group_by(discret.agg.index, strain) %>%
  dplyr::count(survived.90th) %>%
  mutate(prop = prop.table(n)*100 %>% signif(2)) %>%
  filter(survived.90th=="Yes") %>% 
  dplyr::select(c(discret.agg.index, strain, prop)) %>%
  pivot_wider(names_from = strain, values_from = prop) 
# proportions survived to 90th

outf50 <-
km.them %>% 
 group_by(discret.agg.index) %>%
 dplyr::summarize(pval = fisher.test(strain, survived.median)$p.val)

outf90 <-
km.them %>% 
 group_by(discret.agg.index) %>%
 dplyr::summarize(pval = fisher.test(strain, survived.90th)$p.val)

outtau <- km.them %>%#glimpse
  group_by(discret.agg.index) %>%
  dplyr::summarize(median.tau = mean(med.surv), ninty.tau = mean(ninty.surv))

out5 <- left_join(out50, outf50, by="discret.agg.index") %>% left_join(., outtau[c("discret.agg.index","median.tau")], by="discret.agg.index")
out9 <- left_join(out90, outf90, by="discret.agg.index") %>% left_join(., outtau[c("discret.agg.index","ninty.tau")], by="discret.agg.index")

kable(out5, col.names = c("DAI", "C57BL6", "CD1", "Sv129", "p-value", "Tau (50%)"), digits = c(rep(1,4),3,1), caption = "Median survival") %>% kable_styling()

kable(
 (km.them %>%
  group_by(discret.agg.index, strain, survived.median) %>%
  dplyr::summarize(mean = mean(median.days)) %>% subset(survived.median == "Yes"))[c(1,2,4)],
  digits = 2, col.names = c("DAI", "strain", "mean surv. past median"),
  caption = "median survival time past median tau"
) %>% kable_styling()

kable((km.them %>%
  group_by(discret.agg.index, strain) %>%
  count(survived.90th) %>%
  mutate(prop = prop.table(n)*100)), digits = 2, col.names = c("DAI", "strain", "Survived past 90th percentile?", "N", "%"), caption = "% surviving to 90th percentile tau") %>% kable_styling()
# proportions survived to 90th

kable(km.them %>%
  group_by(discret.agg.index) %>%
  dplyr::summarize(ninty.tau = mean(ninty.surv)), digits = 2, col.names = c("DAI", "survival 90th")) %>%
  kable_styling()

kable((km.them %>%
  group_by(discret.agg.index, strain, survived.90th) %>%
  dplyr::summarize(mean = mean(ninty.days)) %>% subset(survived.90th == "Yes"))[c(1,2,4)], digits = 2, col.names = c("DAI", "strain", "mean surv. past 90th percentile"), caption = "median survival time past 90th tau") %>% kable_styling()

#strain by DAI
km.them <-
 km %>% group_by(strain) %>%
 mutate(
  med.surv            = median(death),
  ninty.surv          = quantile(death, probs = .9, na.rm = TRUE),
  survived.median     = ifelse(death > med.surv, "Yes", "No") %>% as_factor(),
  survived.90th       = ifelse(death > ninty.surv, "Yes", "No") %>% as_factor(),
  median.days         = ifelse(death > med.surv, death, 0),
  ninty.days          = ifelse(death > ninty.surv, death, 0) ) 

out50 <-
 km.them %>%
  group_by(strain, discret.agg.index) %>%
  dplyr::count(survived.median) %>%
  mutate(prop = prop.table(n)*100 %>% signif(2)) %>%
  filter(survived.median=="Yes") %>% 
  dplyr::select(c(discret.agg.index, strain, prop)) %>%
  pivot_wider(names_from = discret.agg.index, values_from = prop) 

out90 <-
km.them %>% 
  group_by(strain, discret.agg.index) %>%
  dplyr::count(survived.90th) %>%
  mutate(prop = prop.table(n)*100 %>% signif(2)) %>%
  filter(survived.90th=="Yes") %>% 
  dplyr::select(c(discret.agg.index, strain, prop)) %>%
  pivot_wider(names_from = discret.agg.index, values_from = prop) 
# proportions survived to 90th

outf50 <-
km.them %>% 
 group_by(strain) %>%
 dplyr::summarize(pval = fisher.test(discret.agg.index, survived.median)$p.val)

outf90 <-
km.them %>% 
 group_by(strain) %>%
 dplyr::summarize(pval = fisher.test(discret.agg.index, survived.90th)$p.val)

outtau <- km.them %>%#glimpse
  group_by(strain) %>%
  dplyr::summarize(median.tau = mean(med.surv), ninty.tau = mean(ninty.surv))

out5 <- left_join(out50, outf50, by="strain") %>% left_join(., outtau[c("strain","median.tau")], by="strain")
out9 <- left_join(out90, outf90, by="strain") %>% left_join(., outtau[c("strain","ninty.tau")], by="strain")

kable(out5, col.names = c("Strain", "low", "medium", "high", "p-value", "Tau (50%)"), digits = c(rep(1,4),3,1), caption = "Median survival") %>% kable_styling()

kable((km.them %>% 
  group_by(strain, discret.agg.index, survived.median) %>%
  dplyr::summarize(mean = mean(median.days)) %>% subset(survived.median == "Yes"))[c(1,2,4)], digits = 2, col.names = c("strain", "DAI", "mean surv. past median"), caption = "median survival time past median tau") %>% kable_styling()

kable((km.them %>% 
  group_by(strain, discret.agg.index) %>%
  count(survived.90th) %>%
  mutate(prop = prop.table(n)*100)), digits = 2, col.names = c("strain", "DAI", "Survived past 90th percentile?", "N", "%"), caption = "% surviving to 90th percentile tau") %>% kable_styling()
# proportions survived to 90th

kable((km.them %>%
  group_by(strain, discret.agg.index, survived.90th) %>%
  dplyr::summarize(mean = mean(ninty.days)) %>% subset(survived.90th == "Yes"))[c(1,2,4)], digits = 2, col.names = c("strain", "DAI", "mean surv. past 90th percentile"), caption = "median survival time past 90th tau") %>% kable_styling()

kable(km.them %>% 
    group_by(strain) %>%
    dplyr::summarize(statistic = kruskal.test(ninty.days ~ discret.agg.index)$statistic,
              df = kruskal.test(ninty.days ~ discret.agg.index)$parameter,
              pval = kruskal.test(ninty.days ~ discret.agg.index)$p.value), digits = c(2,2,2,3), col.names = c("strain", "statistic", "df", "p"), caption = "90th percentile survival kruskal-wallis results between DAI, by strain") %>% kable_styling()




#Compute effect size from Chi-Square coefficient
#load required package
library(esc)

#the function needs to be adapted entering all the chisq, p, and total sample size values for all the
#variables analyzed with Chi-Square

#enter
esc_chisq(
  chisq,
  p,
  totaln,
  es.type = c("d"),
  study = NULL
)

# Power calculation for linear mixed models
#load required package
library(simr)

#the function needs to be adapted using the model name of all the models run in nlme
simr::powerSim(model, nsim = 1000, test = fcompare(dep.var ~ cat.variable))

library(performance)
r2(model)

#effect size Kruskal-Wallis
#load required packages
library(rstatix)

#the function needs to be adapted to all datasets analyzed with Kruskal-Wallis test
kruskal_effsize(
  data,
  formula,
  ci = FALSE,
  conf.level = 0.95,
  ci.type = "perc",
  nboot = 1000
)

#effect size Wilcoxon
#load required packages
library(coin)

#the function needs to be adapted to all datasets analyzed with Wilcoxon test

# independent two samples example
km.them.nohigh %>%  wilcox_effsize(median.days ~ discret.agg.index)
2


